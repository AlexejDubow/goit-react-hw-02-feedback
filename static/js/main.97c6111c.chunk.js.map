{"version":3,"sources":["components/Notification/index.jsx","components/Statistics/index.jsx","components/FeedbackOptions/index.jsx","components/Section/index.jsx","utils/FeedbackButton/index.js","components/Feedback/Feedback.jsx","helpers/index.js","index.jsx"],"names":["Notification","message","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","key","type","name","value","onClick","Section","title","children","Object","freeze","GOOD","NEUTRAL","BAD","Feedback","state","handleClick","e","targetName","target","setState","prevState","this","countTotal","toFixed","countPositivePercentage","values","Options","Component","ReactDOM","render","document","getElementById"],"mappings":"qQAWeA,EARM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,2BAAIA,ICuBSC,G,MArBI,SAAC,GAAD,IACjBC,EADiB,EACjBA,KAAMC,EADW,EACXA,QAASC,EADE,EACFA,IAAKC,EADH,EACGA,MAAOC,EADV,EACUA,mBADV,OAGjB,oCACE,2CACED,GAAS,kBAAC,EAAD,CAAcL,QAAQ,wBAC9BK,GACH,oCACE,4BACE,qCAAYH,GACZ,wCAAeC,GACf,oCAAWC,GACX,sCAAaC,GACb,kDAAyBC,EAAzB,WCPOC,G,MARS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,oCAEID,EAAQE,KAAI,SAACC,GAAD,OAAa,4BAAQC,IAAKD,EAAQE,KAAK,SAASC,KAAMH,EAAQI,MAAOJ,EAAQK,QAASP,GAAkBE,SCE3GM,EANC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,4BAAKD,GACL,6BAAMC,KCNKC,SAAOC,OAAO,CAC3BC,KAAM,OACNC,QAAS,UACTC,IAAK,QCIcC,E,4MACnBC,MAAQ,CACNxB,KAAM,EACNE,IAAK,EACLD,QAAS,G,EAEXwB,YAAc,SAACC,GACb,IAAMC,EAAaD,EAAEE,OAAOhB,KAC5B,EAAKiB,UAAS,SAACC,GAAD,sBACXH,EAAaG,EAAUH,GAAc,O,uDAIhC,IAAD,EACwBI,KAAKP,MAA5BxB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,ECtBS,SAACH,EAAMC,EAASC,GAAhB,OAAwBF,EAAOC,EAAUC,EDsB1C8B,CAAWhC,EAAMC,EAASC,GAClCE,ECrBsB,SAACJ,EAAMG,GAAP,OAA0B,IAAPH,EAAcG,GAAO8B,QAAQ,GDqBjDC,CAAwBlC,EAAMG,GACzD,OACI,kBAAC,EAAD,CAASa,MAAO,yBACd,kBAAC,EAAD,CACEV,QAASY,OAAOiB,OAAOC,GACvB7B,gBAAiBwB,KAAKN,cAExB,kBAAC,EAAD,CACEzB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,S,GA5BMiC,aEFtCC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.97c6111c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => (\n  <p>{message}</p>\n);\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Notification from '../Notification';\n\nimport './styles/index.module.css';\n\nconst Statistics = ({\n  good, neutral, bad, total, positivePercentage,\n}) => (\n  <>\n    <h2>Statistics</h2>\n    {!total && <Notification message=\"No feedback given\" />}\n    {!!total && (\n    <>\n      <ul>\n        <li>Good: { good }</li>\n        <li>Neutral: { neutral }</li>\n        <li>Bad: { bad }</li>\n        <li>Total: { total }</li>\n        <li>Positive feedback: { positivePercentage } %</li>\n      </ul>\n    </>\n    )}\n  </>\n);\n\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.string.isRequired,\n};\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles/index.module.css';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <>\r\n    {\r\n      options.map((option) => (<button key={option} type=\"button\" name={option} value={option} onClick={onLeaveFeedback}>{option}</button>))\r\n    }\r\n  </>\r\n);\r\n\r\nexport default FeedbackOptions;\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.string,\r\n  ).isRequired,\r\n};\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <>\n    <h2>{title}</h2>\n    <div>{children}</div>\n  </>\n);\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.arrayOf(PropTypes.element).isRequired,\n};\n","export default Object.freeze({\r\n  GOOD: 'good',\r\n  NEUTRAL: 'neutral',\r\n  BAD: 'bad',\r\n});\r\n","import React, { Component } from \"react\";\r\nimport Statistics from \"../Statistics\";\r\nimport Feedbackoptions from \"../FeedbackOptions\";\r\nimport Section from \"../Section\";\r\nimport { countTotal, countPositivePercentage } from '../../helpers/index';\r\nimport Options from '../../utils/FeedbackButton'\r\n\r\nexport default class Feedback extends Component {\r\n  state = {\r\n    good: 0,\r\n    bad: 0,\r\n    neutral: 0,\r\n  };\r\n  handleClick = (e) => {\r\n    const targetName = e.target.name;\r\n    this.setState((prevState) => ({\r\n      [targetName]: prevState[targetName] + 1,\r\n    }));\r\n  };\r\n  \r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const total = countTotal(good, neutral, bad);\r\n    const positivePercentage = countPositivePercentage(good, total);\r\n    return (\r\n        <Section title={\"Please leave feedback\"}>\r\n          <Feedbackoptions\r\n            options={Object.values(Options)}\r\n            onLeaveFeedback={this.handleClick}\r\n          />\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={total}\r\n            positivePercentage={positivePercentage}\r\n          />\r\n        </Section>\r\n    );\r\n  }\r\n}\r\n// export default Feedback;\r\n","const countTotal = (good, neutral, bad) => good + neutral + bad;\n\nconst countPositivePercentage = (good, total) => ((good * 100) / total).toFixed(2);\n\nexport { countTotal, countPositivePercentage };\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Feedback from './components/Feedback/Feedback';\r\n\r\n\r\nReactDOM.render(\r\n  <Feedback />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}